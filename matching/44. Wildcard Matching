// DP
    public boolean isMatch(String s, String p) {
        boolean[][] match=new boolean[s.length()+1][p.length()+1];
        match[s.length()][p.length()]=true;
        for(int i=p.length()-1;i>=0;i--){
            if(p.charAt(i)!='*')
                break;
            else
                match[s.length()][i]=true;
        }
        for(int i=s.length()-1;i>=0;i--){
            for(int j=p.length()-1;j>=0;j--){
                if(s.charAt(i)==p.charAt(j)||p.charAt(j)=='?')
                        match[i][j]=match[i+1][j+1];
                else if(p.charAt(j)=='*')
                        match[i][j]=match[i+1][j]||match[i][j+1];
                else
                    match[i][j]=false;
            }
        }
        return match[0][0];
    }
    
    
    /*
          match  [s0---]
          |
    s: xyzabcd..wqqcd..
    p: xyz*cd..wqq*...
          ||
          |p0
          starIdx
      
    Key point to be fast is that   
    first * match "ab"  will cover the case the first * match "abcd..wqq", and second * match rest cd..
      
    */    
    boolean isMatch_cool(String s, String p) {
        int s0 = 0, p0 = 0, match = 0, starIdx = -1;            
        while (s0 < s.length()){
            // advancing both pointers
            if (p0 < p.length()  && (p.charAt(p0) == '?' || s.charAt(s0) == p.charAt(p0))){
                s0++;
                p0++;
            }
            // * found, only advancing pattern pointer
            else if (p0 < p.length() && p.charAt(p0) == '*'){
                starIdx = p0;
                match = s0;
                p0++;
            }
           // last pattern pointer was *, advancing string pointer
            else if (starIdx != -1){
                p0 = starIdx + 1;
                match++;
                s0 = match;
            }
           //current pattern pointer is not star, last patter pointer was not *
          //characters do not match
            else return false;
        }
        
        //check for remaining characters in pattern
        while (p0 < p.length() && p.charAt(p0) == '*')
            p0++;
        
        return p0 == p.length();
    }
    
    
    public boolean isMatch_OK(String s, String p) {
        if(p.length()==0 && s.length()==0){
            return true;
        }else if(p.length()==0){
            return false;   
        }else if(s.length()==0){
            // only when p only contains(*)
            for(int i=0; i<p.length();i++){
                if(p.charAt(i)!='*'){
                    return false;
                }
            }
            return true;
        }
        else if(p.charAt(0)=='?'){
            return isMatch(s.substring(1), p.substring(1));
        }else if(p.charAt(0)=='*'){
            ///// key point to make it slow 
            //for(int i=0; i<=s.length(); i++){
            //    if (isMatch(s.substring(i), p.substring(1))){
            //        return true;
            //    }
            //}
            //return false;
            /////////////////////
            
            int k=0;
            while(k<p.length() && p.charAt(k)=='*'){k++;}  // k-first not *
            
            ////// improve 1 ****** continues *
            //for(int i=0; i<=s.length(); i++){
            //    if (isMatch(s.substring(i), p.substring(k))){
            //        return true;
            //    }
            //}
            //return false;
            
            int w=k;
            while(w<p.length() && p.charAt(w)!='*'){w++;}  // next *
            
            //System.out.println("k="+k+"     w="+w);
            
            if(w==p.length()){
                for(int i=0; i<=s.length(); i++){
                    if(isMatch(s.substring(i), p.substring(k))){
                        return true;
                    }
                }
                return false;
            }
            for(int i=w-k; i<=s.length(); i++){
                //System.out.println(s.substring(0,i)+"???????"+ p.substring(k-1,w));
                if(isMatch(s.substring(0,i), p.substring(k-1,w))){
                    //System.out.println(s.substring(i)+"====="+ p.substring(w));
                    return isMatch(s.substring(i), p.substring(w));
                }
            }
            return false;
            
        }else if(p.charAt(0)==s.charAt(0)){
            
            return isMatch(s.substring(1), p.substring(1));
        }else{
            return false;
        }
    }
