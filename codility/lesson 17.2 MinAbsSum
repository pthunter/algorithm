
# problem: a list of integer, put + or - on each, to reach minimum abs sum
# idea, group two, try to make them sumation equal ( try to reach sum(abs[A])/2 )
# 
# slow solution:   dp[x] represent all possible sums, see if it reach S//2 ==> each num loop from S to 0
# faster solution: for duplicate, count it,  ==> and only loop once for one uniqe number


# you can write to stdout for debugging purposes, e.g.
# print "this is a debug message"

def solution(A):
    N = len(A)
    M = 0
    for i in xrange(N):
        A[i] = abs(A[i])
        M = max(A[i], M)
    S = sum(A)
    count = [0] * (M + 1)
    for i in xrange(N):
        count[A[i]] += 1
    dp = [-1] * (S + 1)
    dp[0] = 0
    for a in xrange(1, M + 1):
        if count[a] > 0:
            for j in xrange(S):
                if dp[j] >= 0:
                    dp[j] = count[a]
                elif (j >= a and dp[j - a] > 0):
                    dp[j] = dp[j - a] - 1
    result = S
    for i in xrange(S // 2 + 1):
        if dp[i] >= 0:
            result = min(result, S - 2 * i)
    return result



def min_abs_sum_slow(A):
    N = len(A)
    M = 0
    for i in xrange(N):
        A[i] = abs(A[i])
        M = max(A[i], M)
    S = sum(A)
    dp = [0] * (S + 1)
    dp[0] = 1
    for j in xrange(N):
        for i in xrange(S, -1, -1):
            if (dp[i] == 1) and (i + A[j] <= S):
                dp[i + A[j]] = 1
    result = S
    for i in xrange(S // 2 + 1):
        if dp[i] == 1:
            result = min(result, S - 2 * i)
    return result
