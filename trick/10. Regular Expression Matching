  /*  
    
    This Solution use 2D DP. beat 90% solutions, very simple.

Here are some conditions to figure out, then the logic can be very straightforward.

1, If p.charAt(j) == s.charAt(i) :  dp[i][j] = dp[i-1][j-1];
2, If p.charAt(j) == '.' : dp[i][j] = dp[i-1][j-1];
3, If p.charAt(j) == '*': 
   here are two sub conditions:
               1   if p.charAt(j-1) != s.charAt(i) : dp[i][j] = dp[i][j-2]  //in this case, a* only counts as empty
               2   if p.charAt(i-1) == s.charAt(i) or p.charAt(i-1) == '.':
                              dp[i][j] = dp[i-1][j]    //in this case, a* counts as multiple a 
                           or dp[i][j] = dp[i][j-1]   // in this case, a* counts as single a ( or single '.')
                           or dp[i][j] = dp[i][j-2]   // in this case, a* counts as empty
Here is the solution
*/
public boolean isMatch(String s, String p) {

    if (s == null || p == null) {
        return false;
    }
    boolean[][] dp = new boolean[s.length()+1][p.length()+1];   // [i+1][j+1] s til ith, p til jth char
    dp[0][0] = true;
    for (int i = 0; i < p.length(); i++) {                      // "" match "a*b*c*..."
        if (p.charAt(i) == '*' && dp[0][i-1]) {
            dp[0][i+1] = true;
        }
    }
    for (int i = 0 ; i < s.length(); i++) {
        for (int j = 0; j < p.length(); j++) {
            if (p.charAt(j) == '.') {
                dp[i+1][j+1] = dp[i][j];
            }
            if (p.charAt(j) == s.charAt(i)) {
                dp[i+1][j+1] = dp[i][j];
            }
            if (p.charAt(j) == '*') {
                if (p.charAt(j-1) != s.charAt(i) && p.charAt(j-1) != '.') {     // ab - ac*
                    dp[i+1][j+1] = dp[i+1][j-1];
                } else {                                                        // ab-ab*   abbb-ab*(axyz-a.*)   ax-ab* 
                    dp[i+1][j+1] = (dp[i+1][j] || dp[i][j+1] || dp[i+1][j-1]);
                }
            }
        }
    }
    return dp[s.length()][p.length()];
}
    
    
    
    
    
    ////////// this works but where is ".*"  ????????????????????????
    
    boolean matchFirst(String s, String p){
        if(s.length()==0){return p.length()==0;}
        return ((p.charAt(0) == '.' && s.length()>0) || p.charAt(0) == s.charAt(0));
    }

public boolean isMatch_recur(String s, String p) {
	if (p.length() == 0) return s.length() == 0;	//empty
    if (p.length() == 1) return s.length()==1 && matchFirst(s,p) ;
	if (p.length()>1 && p.charAt(1) != '*') {//without *
		if(!matchFirst(s,p)) return false;
		return isMatch(s.substring(1), p.substring(1));
	} else { //plength == 1 or  p next: with a * 
    	if(isMatch(s, p.substring(2))) return true;    //try the length of 0
		int j = 0;
        while ( matchFirst(s.substring(j),p) ) {      //try all possible lengths, cover both (aaaa a*a) and (xyz .*) !!
			if (isMatch(s.substring(j+1), p.substring(2))) return true;          // j+0 covered 3 lines above
            j++;
        }
	}
    return false;
}
