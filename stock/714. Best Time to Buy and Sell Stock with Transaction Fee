'''
Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee.

You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before you buy again.)

Return the maximum profit you can make.

Example 1:
Input: prices = [1, 3, 2, 8, 4, 9], fee = 2
Output: 8
Explanation: The maximum profit can be achieved by:
Buying at prices[0] = 1
Selling at prices[3] = 8
Buying at prices[4] = 4
Selling at prices[5] = 9
The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
'''

class Solution:
    
    def maxProfit(self, prices, fee):
        """
        :type prices: List[int]
        :type fee: int
        :rtype: int
        """
        cash, hold = 0, -prices[0]
        for i in range(1, len(prices)):
            cash = max(cash, hold + prices[i] - fee)
            hold = max(hold, cash - prices[i])
        return cash
    
    
    def maxProfit_2(self, prices, fee):
        if len(prices)==0:
            return 0
        
        payfee = True
        minp = prices[0]
        maxp = 0
        total = 0
        for i,p in enumerate(prices):
            if payfee:
                if p<minp:
                    minp = p
                if p>minp+fee:
                    total += p-minp-fee
                    payfee = False
                    maxp = p
            else:
                if p<maxp-fee:
                    payfee = True
                    minp = p      #clean
                    maxp = p      #clean
                if p>maxp:
                    total += p-maxp
                    maxp = p
        return total
